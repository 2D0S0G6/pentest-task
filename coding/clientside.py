import socket 
import hmac
import hashlib

def calculate_hmac(msg, key=3):
    return hmac.new(str(msg).encode(), str(key).encode(), hashlib.sha512).hexdigest()

def caesar_cipher(message, shift_amount=3, operation='encrypt'):
    result = ''
    print(message)
    for char in message:
        if char.isalpha():
            base_ascii = ord('a') if char.islower() else ord('A')
            char_ascii = ord(char)
            if operation == 'encrypt':
                shifted_char = chr((char_ascii - base_ascii + shift_amount) % 26 + base_ascii)
            elif operation == 'decrypt':
                shifted_char = chr((char_ascii - base_ascii - shift_amount) % 26 + base_ascii)
            else:
                raise ValueError("Invalid operation. Use 'encrypt' or 'decrypt'")
            
            result += shifted_char
        else:
            result += char
    return result

host = 'localhost'
port = 12349


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))

while True:
    message = input('Enter the message: ')
    if message.lower() == 'exit':
        break

    # Encrypt the message
    ciphertext = caesar_cipher(message)
    
    # Calculate HMAC value
    hmac_value = calculate_hmac(ciphertext)

    # Send HMAC value followed by the ciphertext
    s.sendall(hmac_value.encode())
    s.sendall(ciphertext.encode())

    # Receive the response from the server
    collected_hmac = s.recv(128) 
    r_cipher = s.recv(3)
    
    # Calculate HMAC value for the response
    received_hmac = calculate_hmac(r_cipher.decode())
    
    # Verify HMAC value for the response
    if received_hmac != collected_hmac.decode():
        print("Server response authentication failed. Discarding message.")
        continue

    # Decrypt and print the server response
    decrypted_response = caesar_cipher(r_cipher.decode(), operation="decrypt")
    print('Server Response:', decrypted_response)

s.close()
