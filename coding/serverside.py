import socket 
import hmac
import hashlib
def caesar_cipher(message, shift_amount=3, operation='encrypt'):
    result = ''

    for char in message:
        if char.isalpha():
            base_ascii = ord('a') if char.islower() else ord('A')
            char_ascii = ord(char)
            if operation == 'encrypt':
                shifted_char = chr((char_ascii - base_ascii + shift_amount) % 26 + base_ascii)
            elif operation == 'decrypt':
                shifted_char = chr((char_ascii - base_ascii - shift_amount) % 26 + base_ascii)
            else:
                raise ValueError("Invalid operation. Use 'encrypt' or 'decrypt'")
            
            result += shifted_char
        else:
            result += char
    return result


def calculate_hmac(msg, key=3):
    return hmac.new(str(msg).encode(), str(key).encode(), hashlib.sha512).hexdigest()

host = 'localhost'
port = 12349

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen(1)

print(f"Server listening from {host}:{port}")

conn, addr = s.accept()
print('Getting connection and it is from:', addr)

while True:
    # First, receive the HMAC value
    received_hmac_value = conn.recv(128)  # Increased buffer size to accommodate larger HMAC values

    # Then, receive the ciphertext
    ciphertext = conn.recv(3)

    if not ciphertext:
        break

    # Checking integrity
    calculated_hmac = calculate_hmac(ciphertext.decode())
    if calculated_hmac != received_hmac_value.decode():
        print("Message authentication failed. Discarding message.")
        continue

    # Decrypt
    decrypted_message = caesar_cipher(ciphertext.decode(), operation="decrypt")
    print('Received:', decrypted_message)

    # Respond to the client
    enc_response = caesar_cipher(decrypted_message)
    r_hmac = calculate_hmac(enc_response)

    # Convert to bytes before sending
    conn.send(r_hmac.encode())  # Encode the response and HMAC
    conn.send(enc_response.encode())

